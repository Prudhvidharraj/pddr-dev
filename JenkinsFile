pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'
        SONAR_PROJECT_KEY = 'prudhvi-test'
        ECR_REGISTRY = '448049787674.dkr.ecr.us-west-1.amazonaws.com'
        ECR_REPOSITORY = 'prudhvi-top'
        ECR_REPO_URI = "${ECR_REGISTRY}/${ECR_REPOSITORY}"
        AWS_REGION = 'us-west-1'
        TRIVY_IMAGE = 'aquasec/trivy:latest'
        RECIPIENT_EMAIL = 'nandhuraj0303@gmail.com'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: 'main', 
                    url: 'https://github.com/Prudhvidharraj/pddr-dev.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean install -DskipTests=true'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(env.SONARQUBE_SERVER) {
                    sh """
                    mvn sonar:sonar \
                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                    -Dsonar.projectName=${SONAR_PROJECT_KEY} \
                    -Dsonar.host.url=http://54.183.40.137:9000 \
                    -Dsonar.projectVersion=${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build \
                -t ${ECR_REPO_URI}:${BUILD_NUMBER} \
                -t ${ECR_REPO_URI}:latest .
                """
            }
        }

        stage('Trivy Scan') {
            steps {
                sh script: """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                ${TRIVY_IMAGE} \
                image \
                --exit-code 1 \
                --severity HIGH,CRITICAL \
                --quiet \
                ${ECR_REPO_URI}:${BUILD_NUMBER}
                """, returnStatus: true
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${ECR_REGISTRY}", "ecr:${AWS_REGION}:aws-credentials") {
                        docker.image("${ECR_REPO_URI}:${BUILD_NUMBER}").push()
                        docker.image("${ECR_REPO_URI}:latest").push()
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker image prune -f --filter "dangling=true"'
            cleanWs()
        }
        success {
            emailext(
                subject: "SUCCESS: ${currentBuild.fullDisplayName}",
                body: """<p>Build succeeded!</p>
                <p>ECR Image: ${ECR_REPO_URI}:${BUILD_NUMBER}</p>
                <p>SonarQube Report: <a href="http://54.183.40.137:9000/dashboard?id=${SONAR_PROJECT_KEY}">Link</a></p>
                <p>Build URL: <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                to: "${RECIPIENT_EMAIL}",
                replyTo: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        failure {
            emailext(
                subject: "FAILED: ${currentBuild.fullDisplayName}",
                body: """<p>Build failed! Check logs:</p>
                <p><a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                to: "${RECIPIENT_EMAIL}",
                replyTo: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html',
                attachLog: true,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
			